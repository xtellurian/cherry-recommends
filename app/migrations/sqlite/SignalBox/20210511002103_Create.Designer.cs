// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalBox.Infrastructure;

namespace sqlite.SignalBox
{
    [DbContext(typeof(SignalBoxDbContext))]
    [Migration("20210511002103_Create")]
    partial class Create
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("ExperimentOffer", b =>
                {
                    b.Property<long>("ExperimentsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("OffersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExperimentsId", "OffersId");

                    b.HasIndex("OffersId");

                    b.ToTable("ExperimentOffer");
                });

            modelBuilder.Entity("SegmentTrackedUser", b =>
                {
                    b.Property<long>("InSegmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SegmentsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InSegmentId", "SegmentsId");

                    b.HasIndex("SegmentsId");

                    b.ToTable("SegmentTrackedUser");
                });

            modelBuilder.Entity("SignalBox.Core.Experiment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConcurrentOffers")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("SignalBox.Core.HashedApiKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlgorithmName")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HashedKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("SignalBox.Core.Offer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cost")
                        .HasColumnType("REAL");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscountCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("OfferRecommendationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("OfferRecommendationId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("SignalBox.Core.OfferRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("ExperimentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Features")
                        .HasColumnType("TEXT");

                    b.Property<string>("IterationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("IterationOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackedUserExternalId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("SignalBox.Core.PresentationOutcome", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("ExperimentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IterationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("IterationOrder")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("OfferId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Outcome")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecommendationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.HasIndex("OfferId");

                    b.HasIndex("RecommendationId");

                    b.ToTable("PresentationOutcomes");
                });

            modelBuilder.Entity("SignalBox.Core.Rule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EventKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventLogicalValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("SegmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("SignalBox.Core.Segment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ExternalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("TrackedUsers");
                });

            modelBuilder.Entity("ExperimentOffer", b =>
                {
                    b.HasOne("SignalBox.Core.Experiment", null)
                        .WithMany()
                        .HasForeignKey("ExperimentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Offer", null)
                        .WithMany()
                        .HasForeignKey("OffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SegmentTrackedUser", b =>
                {
                    b.HasOne("SignalBox.Core.TrackedUser", null)
                        .WithMany()
                        .HasForeignKey("InSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Segment", null)
                        .WithMany()
                        .HasForeignKey("SegmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalBox.Core.Experiment", b =>
                {
                    b.OwnsMany("SignalBox.Core.Iteration", "Iterations", b1 =>
                        {
                            b1.Property<long>("ExperimentId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Order")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ExperimentId", "Id");

                            b1.ToTable("Iteration");

                            b1.WithOwner()
                                .HasForeignKey("ExperimentId");
                        });

                    b.Navigation("Iterations");
                });

            modelBuilder.Entity("SignalBox.Core.Offer", b =>
                {
                    b.HasOne("SignalBox.Core.OfferRecommendation", null)
                        .WithMany("Offers")
                        .HasForeignKey("OfferRecommendationId");
                });

            modelBuilder.Entity("SignalBox.Core.PresentationOutcome", b =>
                {
                    b.HasOne("SignalBox.Core.Experiment", "Experiment")
                        .WithMany()
                        .HasForeignKey("ExperimentId");

                    b.HasOne("SignalBox.Core.Offer", "Offer")
                        .WithMany("Outcomes")
                        .HasForeignKey("OfferId");

                    b.HasOne("SignalBox.Core.OfferRecommendation", "Recommendation")
                        .WithMany()
                        .HasForeignKey("RecommendationId");

                    b.Navigation("Experiment");

                    b.Navigation("Offer");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("SignalBox.Core.Offer", b =>
                {
                    b.Navigation("Outcomes");
                });

            modelBuilder.Entity("SignalBox.Core.OfferRecommendation", b =>
                {
                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
