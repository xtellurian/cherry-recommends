// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalBox.Infrastructure;

namespace sqlite.SignalBox.SubSignalBoxDbContext
{
    [DbContext(typeof(SignalBoxDbContext))]
    [Migration("20211216063904_develop_rename_tracked_users_to_customers")]
    partial class develop_rename_tracked_users_to_customers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("CustomerSegment", b =>
                {
                    b.Property<long>("InSegmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SegmentsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InSegmentId", "SegmentsId");

                    b.HasIndex("SegmentsId");

                    b.ToTable("SegmentTrackedUser");
                });

            modelBuilder.Entity("FeatureRecommenderEntityBase", b =>
                {
                    b.Property<long>("LearningFeaturesId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecommendersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LearningFeaturesId", "RecommendersId");

                    b.HasIndex("RecommendersId");

                    b.ToTable("FeatureRecommenderEntityBase");
                });

            modelBuilder.Entity("ItemsRecommendationRecommendableItem", b =>
                {
                    b.Property<long>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecommendationsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsId", "RecommendationsId");

                    b.HasIndex("RecommendationsId");

                    b.ToTable("ItemsRecommendationRecommendableItem");
                });

            modelBuilder.Entity("ItemsRecommenderRecommendableItem", b =>
                {
                    b.Property<long>("ItemsId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecommendersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsId", "RecommendersId");

                    b.HasIndex("RecommendersId");

                    b.ToTable("ItemsRecommenderRecommendableItem");
                });

            modelBuilder.Entity("ParameterParameterSetRecommender", b =>
                {
                    b.Property<long>("ParameterSetRecommendersId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ParametersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParameterSetRecommendersId", "ParametersId");

                    b.HasIndex("ParametersId");

                    b.ToTable("ParameterParameterSetRecommender");
                });

            modelBuilder.Entity("ProductProductRecommender", b =>
                {
                    b.Property<long>("ProductRecommendersId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductRecommendersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductRecommender");
                });

            modelBuilder.Entity("SignalBox.Core.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("CommonUserId");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommonId")
                        .IsUnique();

                    b.HasIndex("EnvironmentId");

                    b.ToTable("TrackedUsers");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CommonId = "anonymous",
                            Created = 0L,
                            LastUpdated = 0L,
                            Name = "Anonymous Customer",
                            Properties = "{}"
                        });
                });

            modelBuilder.Entity("SignalBox.Core.CustomerEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("CommonUserId");

                    b.Property<string>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventKind")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Kind")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecommendationCorrelatorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("RecommendationCorrelatorId");

                    b.HasIndex("SourceId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("TrackedUserEvents");
                });

            modelBuilder.Entity("SignalBox.Core.Environment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("SignalBox.Core.Feature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommonId")
                        .IsUnique();

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("SignalBox.Core.FeatureGenerator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilterSelectAggregateSteps")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeneratorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastEnqueued")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureGenerators");
                });

            modelBuilder.Entity("SignalBox.Core.Features.Destinations.FeatureDestinationBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConnectedSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureDestinations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureDestinationBase");
                });

            modelBuilder.Entity("SignalBox.Core.HashedApiKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlgorithmName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ApiKeyType")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HashedKey")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LastExchanged")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalExchanges")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("SignalBox.Core.HistoricTrackedUserFeature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("REAL");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.Property<long>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrackedUserId");

                    b.HasIndex("FeatureId", "TrackedUserId", "Version")
                        .IsUnique();

                    b.ToTable("HistoricTrackedUserFeatures");
                });

            modelBuilder.Entity("SignalBox.Core.IntegratedSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cache")
                        .HasColumnType("TEXT");

                    b.Property<long?>("CacheLastRefreshed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("IntegratedSystem");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IntegrationStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('NotConfigured')");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TokenResponse")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TokenResponseUpdated")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("IntegratedSystems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IntegratedSystem");
                });

            modelBuilder.Entity("SignalBox.Core.LatestFeatureVersion", b =>
                {
                    b.Property<long>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("HistoricTrackedUserFeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxVersion")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.ToView("View_MaxHistoricTrackedUserFeatureVersion");
                });

            modelBuilder.Entity("SignalBox.Core.ModelRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("HostingType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ModelType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScoringUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Swagger")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ModelRegistrations");
                });

            modelBuilder.Entity("SignalBox.Core.Parameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommonId")
                        .IsUnique();

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("SignalBox.Core.RecommendableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DirectCost")
                        .HasColumnType("REAL");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Product");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double?>("ListPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommonId")
                        .IsUnique();

                    b.HasIndex("EnvironmentId");

                    b.ToTable("RecommendableItems");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecommendableItem");

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CommonId = "default",
                            Created = 0L,
                            Description = "The default recommendable item. When this item is recommended, no action should be taken.",
                            LastUpdated = 0L,
                            Name = "Default Item",
                            Properties = "{}"
                        });
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.Destinations.RecommendationDestinationBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConnectedSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedSystemId");

                    b.HasIndex("RecommenderId");

                    b.ToTable("RecommendationDestinations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecommendationDestinationBase");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.ItemsRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ModelInput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelInputType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelOutputType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecommendationCorrelatorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecommenderType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scores")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecommendationCorrelatorId");

                    b.HasIndex("RecommenderId");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("ItemsRecommendations");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.ParameterSetRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ModelInput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelInputType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelOutputType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecommendationCorrelatorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecommenderType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RecommendationCorrelatorId");

                    b.HasIndex("RecommenderId");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("ParameterSetRecommendations");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.ProductRecommendation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ModelInput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelInputType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelOutput")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelOutputType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecommendationCorrelatorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecommenderType")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Trigger")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecommendationCorrelatorId");

                    b.HasIndex("RecommenderId");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("ProductRecommendations");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.RecommendationCorrelator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("ModelRegistrationId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ModelRegistrationId1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModelRegistrationId");

                    b.HasIndex("ModelRegistrationId1");

                    b.HasIndex("RecommenderId");

                    b.ToTable("RecommendationCorrelators");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.InvokationLogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CorrelatorId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("InvokeEnded")
                        .HasColumnType("INTEGER");

                    b.Property<long>("InvokeStarted")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Messages")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelResponse")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecommenderEntityBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecommenderType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Success")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CorrelatorId");

                    b.HasIndex("InvokeStarted");

                    b.HasIndex("RecommenderEntityBaseId");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("InvokationLogEntry");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.RecommenderEntityBase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arguments")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorHandling")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("ModelRegistrationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("Settings")
                        .HasColumnType("TEXT");

                    b.Property<string>("TriggerCollection")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommonId")
                        .IsUnique();

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ModelRegistrationId");

                    b.ToTable("Recommenders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RecommenderEntityBase");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.RecommenderTargetVariableValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("End")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("RecommenderEntityBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecommenderId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Start")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RecommenderEntityBaseId");

                    b.HasIndex("RecommenderId", "Name", "Version")
                        .IsUnique();

                    b.ToTable("RecommenderTargetVariableValue");
                });

            modelBuilder.Entity("SignalBox.Core.RewardSelector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SelectorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActionName", "SelectorType")
                        .IsUnique();

                    b.ToTable("RewardSelectors");
                });

            modelBuilder.Entity("SignalBox.Core.Rule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventLogicalValue")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long>("SegmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("SignalBox.Core.Segment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("SignalBox.Core.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseName")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenant", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("SignalBox.Core.TenantMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "TenantId")
                        .IsUnique();

                    b.ToTable("TenantMembership", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("SignalBox.Core.TenantTermsOfServiceAcceptance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcceptedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("TenantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("Version", "AcceptedByUserId")
                        .IsUnique();

                    b.ToTable("TenantTermsOfServiceAcceptance", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("SignalBox.Core.Touchpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("EnvironmentId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommonId")
                        .IsUnique();

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Touchpoints");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUserAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ActionValue")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AssociatedRevenue")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("CommonUserId");

                    b.Property<string>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("FeedbackScore")
                        .HasColumnType("REAL");

                    b.Property<long?>("IntegratedSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("RecommendationCorrelatorId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrackedUserEventId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActionName");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RecommendationCorrelatorId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("TrackedUserEventId");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("TrackedUserActions");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUserSystemMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("IntegratedSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IntegratedSystemId");

                    b.HasIndex("TrackedUserId");

                    b.HasIndex("UserId", "TrackedUserId", "IntegratedSystemId")
                        .IsUnique();

                    b.ToTable("TrackUserSystemMaps");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUserTouchpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("TouchpointId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TrackedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Values")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TouchpointId");

                    b.HasIndex("TrackedUserId");

                    b.ToTable("TrackedUserTouchpoints");
                });

            modelBuilder.Entity("SignalBox.Core.WebhookReceiver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EndpointId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IntegratedSystemId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SharedSecret")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId")
                        .IsUnique();

                    b.HasIndex("IntegratedSystemId");

                    b.ToTable("WebhookReceivers");
                });

            modelBuilder.Entity("SignalBox.Core.Features.Destinations.HubspotContactPropertyFeatureDestination", b =>
                {
                    b.HasBaseType("SignalBox.Core.Features.Destinations.FeatureDestinationBase");

                    b.Property<string>("HubspotPropertyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("HubspotContactPropertyFeatureDestination");
                });

            modelBuilder.Entity("SignalBox.Core.Features.Destinations.WebhookFeatureDestination", b =>
                {
                    b.HasBaseType("SignalBox.Core.Features.Destinations.FeatureDestinationBase");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("WebhookFeatureDestination");
                });

            modelBuilder.Entity("SignalBox.Core.Integrations.Custom.CustomIntegratedSystem", b =>
                {
                    b.HasBaseType("SignalBox.Core.IntegratedSystem");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationSecret")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("CustomIntegratedSystem");
                });

            modelBuilder.Entity("SignalBox.Core.Product", b =>
                {
                    b.HasBaseType("SignalBox.Core.RecommendableItem");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.Destinations.SegmentSourceFunctionDestination", b =>
                {
                    b.HasBaseType("SignalBox.Core.Recommendations.Destinations.RecommendationDestinationBase");

                    b.Property<string>("Endpoint")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SegmentSourceFunctionDestination");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.Destinations.WebhookDestination", b =>
                {
                    b.HasBaseType("SignalBox.Core.Recommendations.Destinations.RecommendationDestinationBase");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("WebhookDestination_Endpoint");

                    b.HasDiscriminator().HasValue("WebhookDestination");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ItemsRecommender", b =>
                {
                    b.HasBaseType("SignalBox.Core.Recommenders.RecommenderEntityBase");

                    b.Property<long?>("DefaultItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfItemsToRecommend")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DefaultItemId");

                    b.HasDiscriminator().HasValue("ItemsRecommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ParameterSetRecommender", b =>
                {
                    b.HasBaseType("SignalBox.Core.Recommenders.RecommenderEntityBase");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterBounds")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScoringUrl")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("ParameterSetRecommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ProductRecommender", b =>
                {
                    b.HasBaseType("SignalBox.Core.Recommenders.RecommenderEntityBase");

                    b.Property<long?>("DefaultProductId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DefaultProductId");

                    b.HasDiscriminator().HasValue("ProductRecommender");
                });

            modelBuilder.Entity("CustomerSegment", b =>
                {
                    b.HasOne("SignalBox.Core.Customer", null)
                        .WithMany()
                        .HasForeignKey("InSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Segment", null)
                        .WithMany()
                        .HasForeignKey("SegmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeatureRecommenderEntityBase", b =>
                {
                    b.HasOne("SignalBox.Core.Feature", null)
                        .WithMany()
                        .HasForeignKey("LearningFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Recommenders.RecommenderEntityBase", null)
                        .WithMany()
                        .HasForeignKey("RecommendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemsRecommendationRecommendableItem", b =>
                {
                    b.HasOne("SignalBox.Core.RecommendableItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Recommendations.ItemsRecommendation", null)
                        .WithMany()
                        .HasForeignKey("RecommendationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemsRecommenderRecommendableItem", b =>
                {
                    b.HasOne("SignalBox.Core.RecommendableItem", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Recommenders.ItemsRecommender", null)
                        .WithMany()
                        .HasForeignKey("RecommendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParameterParameterSetRecommender", b =>
                {
                    b.HasOne("SignalBox.Core.Recommenders.ParameterSetRecommender", null)
                        .WithMany()
                        .HasForeignKey("ParameterSetRecommendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Parameter", null)
                        .WithMany()
                        .HasForeignKey("ParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductRecommender", b =>
                {
                    b.HasOne("SignalBox.Core.Recommenders.ProductRecommender", null)
                        .WithMany()
                        .HasForeignKey("ProductRecommendersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalBox.Core.Customer", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.CustomerEvent", b =>
                {
                    b.HasOne("SignalBox.Core.Recommendations.RecommendationCorrelator", "RecommendationCorrelator")
                        .WithMany()
                        .HasForeignKey("RecommendationCorrelatorId");

                    b.HasOne("SignalBox.Core.IntegratedSystem", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("TrackedUserId");

                    b.Navigation("Customer");

                    b.Navigation("RecommendationCorrelator");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("SignalBox.Core.Feature", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.FeatureGenerator", b =>
                {
                    b.HasOne("SignalBox.Core.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("SignalBox.Core.Features.Destinations.FeatureDestinationBase", b =>
                {
                    b.HasOne("SignalBox.Core.IntegratedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Feature", "Feature")
                        .WithMany("Destinations")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("SignalBox.Core.HistoricTrackedUserFeature", b =>
                {
                    b.HasOne("SignalBox.Core.Feature", "Feature")
                        .WithMany("HistoricTrackedUserFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany("HistoricTrackedUserFeatures")
                        .HasForeignKey("TrackedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("SignalBox.Core.IntegratedSystem", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.Parameter", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.RecommendableItem", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.Destinations.RecommendationDestinationBase", b =>
                {
                    b.HasOne("SignalBox.Core.IntegratedSystem", "ConnectedSystem")
                        .WithMany()
                        .HasForeignKey("ConnectedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Recommenders.RecommenderEntityBase", "Recommender")
                        .WithMany("RecommendationDestinations")
                        .HasForeignKey("RecommenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectedSystem");

                    b.Navigation("Recommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.ItemsRecommendation", b =>
                {
                    b.HasOne("SignalBox.Core.Recommendations.RecommendationCorrelator", "RecommendationCorrelator")
                        .WithMany()
                        .HasForeignKey("RecommendationCorrelatorId");

                    b.HasOne("SignalBox.Core.Recommenders.ItemsRecommender", "Recommender")
                        .WithMany("Recommendations")
                        .HasForeignKey("RecommenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("TrackedUserId");

                    b.Navigation("Customer");

                    b.Navigation("RecommendationCorrelator");

                    b.Navigation("Recommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.ParameterSetRecommendation", b =>
                {
                    b.HasOne("SignalBox.Core.Recommendations.RecommendationCorrelator", "RecommendationCorrelator")
                        .WithMany()
                        .HasForeignKey("RecommendationCorrelatorId");

                    b.HasOne("SignalBox.Core.Recommenders.ParameterSetRecommender", "Recommender")
                        .WithMany("Recommendations")
                        .HasForeignKey("RecommenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("TrackedUserId");

                    b.Navigation("Customer");

                    b.Navigation("RecommendationCorrelator");

                    b.Navigation("Recommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.ProductRecommendation", b =>
                {
                    b.HasOne("SignalBox.Core.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SignalBox.Core.Recommendations.RecommendationCorrelator", "RecommendationCorrelator")
                        .WithMany()
                        .HasForeignKey("RecommendationCorrelatorId");

                    b.HasOne("SignalBox.Core.Recommenders.ProductRecommender", "Recommender")
                        .WithMany("ProductRecommendations")
                        .HasForeignKey("RecommenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("TrackedUserId");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("RecommendationCorrelator");

                    b.Navigation("Recommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.RecommendationCorrelator", b =>
                {
                    b.HasOne("SignalBox.Core.ModelRegistration", "ModelRegistration")
                        .WithMany()
                        .HasForeignKey("ModelRegistrationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignalBox.Core.ModelRegistration", null)
                        .WithMany("Correlators")
                        .HasForeignKey("ModelRegistrationId1");

                    b.HasOne("SignalBox.Core.Recommenders.RecommenderEntityBase", "Recommender")
                        .WithMany("RecommendationCorrelators")
                        .HasForeignKey("RecommenderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ModelRegistration");

                    b.Navigation("Recommender");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.InvokationLogEntry", b =>
                {
                    b.HasOne("SignalBox.Core.Recommendations.RecommendationCorrelator", "Correlator")
                        .WithMany()
                        .HasForeignKey("CorrelatorId");

                    b.HasOne("SignalBox.Core.Recommenders.RecommenderEntityBase", null)
                        .WithMany("RecommenderInvokationLogs")
                        .HasForeignKey("RecommenderEntityBaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("TrackedUserId");

                    b.Navigation("Correlator");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.RecommenderEntityBase", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SignalBox.Core.ModelRegistration", "ModelRegistration")
                        .WithMany("Recommenders")
                        .HasForeignKey("ModelRegistrationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Environment");

                    b.Navigation("ModelRegistration");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.RecommenderTargetVariableValue", b =>
                {
                    b.HasOne("SignalBox.Core.Recommenders.RecommenderEntityBase", null)
                        .WithMany("TargetVariableValues")
                        .HasForeignKey("RecommenderEntityBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SignalBox.Core.Rule", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.Segment", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId");

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.TenantMembership", b =>
                {
                    b.HasOne("SignalBox.Core.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SignalBox.Core.TenantTermsOfServiceAcceptance", b =>
                {
                    b.HasOne("SignalBox.Core.Tenant", "Tenant")
                        .WithMany("AcceptedTerms")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("SignalBox.Core.Touchpoint", b =>
                {
                    b.HasOne("SignalBox.Core.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUserAction", b =>
                {
                    b.HasOne("SignalBox.Core.Recommendations.RecommendationCorrelator", "RecommendationCorrelator")
                        .WithMany("TrackedUserActions")
                        .HasForeignKey("RecommendationCorrelatorId");

                    b.HasOne("SignalBox.Core.CustomerEvent", "TrackedUserEvent")
                        .WithMany("Actions")
                        .HasForeignKey("TrackedUserEventId");

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany("Actions")
                        .HasForeignKey("TrackedUserId");

                    b.Navigation("Customer");

                    b.Navigation("RecommendationCorrelator");

                    b.Navigation("TrackedUserEvent");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUserSystemMap", b =>
                {
                    b.HasOne("SignalBox.Core.IntegratedSystem", "IntegratedSystem")
                        .WithMany()
                        .HasForeignKey("IntegratedSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany("IntegratedSystemMaps")
                        .HasForeignKey("TrackedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("IntegratedSystem");
                });

            modelBuilder.Entity("SignalBox.Core.TrackedUserTouchpoint", b =>
                {
                    b.HasOne("SignalBox.Core.Touchpoint", "Touchpoint")
                        .WithMany("TrackedUserTouchpoints")
                        .HasForeignKey("TouchpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalBox.Core.Customer", "Customer")
                        .WithMany("TrackedUserTouchpoints")
                        .HasForeignKey("TrackedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Touchpoint");
                });

            modelBuilder.Entity("SignalBox.Core.WebhookReceiver", b =>
                {
                    b.HasOne("SignalBox.Core.IntegratedSystem", "IntegratedSystem")
                        .WithMany("WebhookReceivers")
                        .HasForeignKey("IntegratedSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("IntegratedSystem");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ItemsRecommender", b =>
                {
                    b.HasOne("SignalBox.Core.RecommendableItem", "DefaultItem")
                        .WithMany()
                        .HasForeignKey("DefaultItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DefaultItem");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ProductRecommender", b =>
                {
                    b.HasOne("SignalBox.Core.Product", "DefaultProduct")
                        .WithMany()
                        .HasForeignKey("DefaultProductId");

                    b.Navigation("DefaultProduct");
                });

            modelBuilder.Entity("SignalBox.Core.Customer", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("HistoricTrackedUserFeatures");

                    b.Navigation("IntegratedSystemMaps");

                    b.Navigation("TrackedUserTouchpoints");
                });

            modelBuilder.Entity("SignalBox.Core.CustomerEvent", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("SignalBox.Core.Feature", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("HistoricTrackedUserFeatures");
                });

            modelBuilder.Entity("SignalBox.Core.IntegratedSystem", b =>
                {
                    b.Navigation("WebhookReceivers");
                });

            modelBuilder.Entity("SignalBox.Core.ModelRegistration", b =>
                {
                    b.Navigation("Correlators");

                    b.Navigation("Recommenders");
                });

            modelBuilder.Entity("SignalBox.Core.Recommendations.RecommendationCorrelator", b =>
                {
                    b.Navigation("TrackedUserActions");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.RecommenderEntityBase", b =>
                {
                    b.Navigation("RecommendationCorrelators");

                    b.Navigation("RecommendationDestinations");

                    b.Navigation("RecommenderInvokationLogs");

                    b.Navigation("TargetVariableValues");
                });

            modelBuilder.Entity("SignalBox.Core.Tenant", b =>
                {
                    b.Navigation("AcceptedTerms");
                });

            modelBuilder.Entity("SignalBox.Core.Touchpoint", b =>
                {
                    b.Navigation("TrackedUserTouchpoints");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ItemsRecommender", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ParameterSetRecommender", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("SignalBox.Core.Recommenders.ProductRecommender", b =>
                {
                    b.Navigation("ProductRecommendations");
                });
#pragma warning restore 612, 618
        }
    }
}
